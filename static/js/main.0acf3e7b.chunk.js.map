{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","TweetBox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","explanation","alt","fontSize","Feed","props","addPost","poster_url","API_URL","setState","page","state","loading","axios","get","then","response1","post","data","response2","userInfo","console","log","posts","concat","catch","err2","err1","handleScroll","height_target","Math","round","scrollHeight","scrollTop","ceil","clientHeight","i","nextProps","nextState","nextContext","this","onScroll","map","index","key","React","Component","Widgets","App","lang","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qTAYeA,MATf,YAAgD,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACrC,OACE,yBAAKC,UAAS,wBAAmBH,GAAU,0BACzC,kBAACE,EAAD,MACA,wBAAIC,UAAW,QAASF,K,iJC6BfG,MAtBf,WACE,OACE,yBAAKD,UAAU,WACb,kBAAC,IAAD,CAAaA,UAAU,yBAEvB,kBAAC,EAAD,CAAeH,QAAM,EAACE,KAAMG,IAAUJ,KAAK,SAC3C,kBAAC,EAAD,CAAeC,KAAMI,IAAYL,KAAK,YACtC,kBAAC,EAAD,CAAeC,KAAMK,IAAuBN,KAAK,kBACjD,kBAAC,EAAD,CAAeC,KAAMM,IAAiBP,KAAK,aAC3C,kBAAC,EAAD,CAAeC,KAAMO,IAAoBR,KAAK,cAC9C,kBAAC,EAAD,CAAeC,KAAMQ,IAAaT,KAAK,UACvC,kBAAC,EAAD,CAAeC,KAAMS,IAAkBV,KAAK,YAC5C,kBAAC,EAAD,CAAeC,KAAMU,IAAeX,KAAK,SAGzC,kBAACY,EAAA,EAAD,CAAQC,QAAQ,WAAWX,UAAU,iBAAiBY,WAAS,GAA/D,W,mFCZSC,E,OAJKC,EAASC,cAXN,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKMC,YC2CRC,MArDf,WAAqB,IAAD,EACsBC,mBAAS,IAD/B,mBACXC,EADW,KACGC,EADH,OAEkBF,mBAAS,IAF3B,mBAEXG,EAFW,KAECC,EAFD,KAqBlB,OACE,yBAAK9B,UAAU,YACb,8BACE,yBAAKA,UAAU,mBACb,kBAAC+B,EAAA,EAAD,CAAQC,IAAI,gLACZ,2BACEC,SAAU,SAACC,GAAD,OAAON,EAAgBM,EAAEC,OAAOC,QAC1CA,MAAOT,EACPU,YAAY,oBACZC,KAAK,UAGT,2BACEF,MAAOP,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAAcI,EAAEC,OAAOC,QACxCpC,UAAU,uBACVqC,YAAY,4BACZC,KAAK,SAGP,kBAAC5B,EAAA,EAAD,CACE6B,QAtCU,SAACL,GACjBA,EAAEM,iBAEF3B,EAAG4B,WAAW,SAASC,IAAI,CACzBC,YAAa,aACbC,SAAU,aACVC,UAAU,EACV/C,KAAM6B,EACNmB,MAAOjB,EACPkB,OACE,gLAGJnB,EAAgB,IAChBE,EAAc,KAyBRQ,KAAK,SACLtC,UAAU,yBAHZ,Y,6ECEOgD,EAvCFC,sBAAW,WAAwEC,GAAS,IAA9EP,EAA6E,EAA7EA,YAAaC,EAAgE,EAAhEA,SAAUC,EAAsD,EAAtDA,SAAU/C,EAA4C,EAA5CA,KAAMgD,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,OAA+B,EAAvBI,YAE/E,OACE,yBAAKnD,UAAU,OAAOkD,IAAKA,GAEzB,yBAAKlD,UAAU,gBACb,kBAAC+B,EAAA,EAAD,CAAQC,IAAKe,KAGf,yBAAK/C,UAAU,cAEb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,oBACb,4BACG2C,EAAa,IACd,0BAAM3C,UAAU,uBACf6C,GAAY,kBAAC,IAAD,CAAkB7C,UAAU,gBADzC,KAEG4C,KAIP,yBAAK5C,UAAU,2BACb,2BAAIF,KAIR,yBAAKkC,IAAKc,EAAOM,IAAI,KAErB,yBAAKpD,UAAU,gBACb,kBAAC,IAAD,CAAuBqD,SAAS,UAChC,kBAAC,IAAD,CAAYA,SAAS,UACrB,kBAAC,IAAD,CAAoBA,SAAS,gB,iBCyDxBC,E,kDAtFb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAaRC,QAAU,WAGN,IAGIC,EAAaC,oBACjB,EAAKC,SAAS,CAACC,KAAM,EAAKC,MAAMD,KAAO,EAAGE,SAAS,IAEnDC,IACGC,IALeN,wBAMfO,MAAK,SAAAC,GACJ,IAAIC,EACJA,EAAOD,EAAUE,KAAK,GACtBX,EAAaA,EAAaU,EAAI,OAAa,IAC3CJ,IACGC,IAAIP,GACJQ,MAAK,SAAAI,GACJ,IAAIC,EAAWD,EAAUD,KAAK,GAC9BD,EAAI,SAAeG,EAAQ,SAC3BH,EAAI,YAAkBG,EAAQ,YAC9BH,EAAI,OAAaG,EAAQ,OACzBH,EAAI,SAAeG,EAAQ,SAC3BC,QAAQC,IAAIL,GACZ,EAAKR,SAAS,CAACc,MAAO,EAAKZ,MAAMY,MAAMC,OAAOP,KAC9C,EAAKR,SAAS,CAACG,SAAS,OAEzBa,OAAM,SAAAC,GAASL,QAAQC,IAAI,iBAAmBI,GAAO,EAAKjB,SAAS,CAACG,SAAS,UAEjFa,OAAM,SAAAE,GAASN,QAAQC,IAAI,iBAAmBK,GAAO,EAAKlB,SAAS,CAACG,SAAS,QA3CjE,EA+CnBgB,aAAe,SAAC5C,GACdA,EAAEM,iBACF,IAAMuC,EAAgBC,KAAKC,MAAM/C,EAAEC,OAAO+C,aAAehD,EAAEC,OAAOgD,YAIvC,IAAvB,EAAKtB,MAAMC,SAAqBiB,GAAiBC,KAAKI,KAAKlD,EAAEC,OAAOkD,cAAgB,MACtFd,QAAQC,IAAI,4CACZ,EAAKhB,YArDP,EAAKK,MAAQ,CAACC,SAAS,EAAOF,KAAM,EAAGa,MAAO,IAE9C,IAAK,IAAIa,EAAI,EAAGA,EAAI,EAAGA,IACrB,EAAK9B,UALU,S,kEAUG+B,EAAWC,EAAWC,GAC1C,OAAQC,KAAK7B,MAAMC,U,+BAkDnB,OACE,yBAAK9D,UAAU,OAAO2F,SAAUD,KAAKZ,cACnC,yBAAK9E,UAAU,gBACb,qCAEF,kBAAC,EAAD,MACA,kBAAC,IAAD,KACG0F,KAAK7B,MAAMY,MAAMmB,KAAI,SAACzB,EAAM0B,GAAP,OACpB,kBAAC,EAAD,CACEC,IAAKD,EACLjD,SAAUuB,EAAKvB,SACfD,YAAawB,EAAKxB,YAClBE,SAAUsB,EAAKtB,SACf/C,KAAMqE,EAAKrE,KACXiD,OAAQoB,EAAKpB,OACbD,MAAOqB,EAAKrB,YAIlB,4BAAQP,QAASmD,KAAKlC,SAAtB,yB,GAlFWuC,IAAMC,W,cCgBVC,MAhBf,WACE,OACE,yBAAKjG,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAYA,UAAU,wBACtB,2BAAOqC,YAAY,iBAAiBC,KAAK,UAG3C,yBAAKtC,UAAU,4BACb,mD,OCIOkG,MAbf,WACE,OAEE,0BAAMC,KAAK,MACT,yBAAKnG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJYoG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.0acf3e7b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SidebarOption.css\";\r\n\r\nfunction SidebarOption({ active, text, Icon }) {\r\n  return (\r\n    <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\r\n      <Icon />\r\n      <h2 className={'text'}>{text}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarOption;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\r\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <TwitterIcon className=\"sidebar__twitterIcon\" />\r\n\r\n      <SidebarOption active Icon={HomeIcon} text=\"Home\" />\r\n      <SidebarOption Icon={SearchIcon} text=\"Explore\" />\r\n      <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" />\r\n      <SidebarOption Icon={MailOutlineIcon} text=\"Messages\" />\r\n      <SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\" />\r\n      <SidebarOption Icon={ListAltIcon} text=\"Lists\" />\r\n      <SidebarOption Icon={PermIdentityIcon} text=\"Profile\" />\r\n      <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\r\n\r\n      {/* Button -> Tweet */}\r\n      <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth>\r\n        Tweet\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCw-li0IscS2rJr68dSjoJL3KM3eFq5PfE\",\r\n  authDomain: \"twitter-clone-1faac.firebaseapp.com\",\r\n  databaseURL: \"https://twitter-clone-1faac.firebaseio.com\",\r\n  projectId: \"twitter-clone-1faac\",\r\n  storageBucket: \"twitter-clone-1faac.appspot.com\",\r\n  messagingSenderId: \"316208638057\",\r\n  appId: \"1:316208638057:web:75a37bf24fab32ff145af8\",\r\n  measurementId: \"G-HGFP2LDXP9\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport db from \"./firebase\";\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"posts\").add({\r\n      displayName: \"Rafeh Qazi\",\r\n      username: \"cleverqazi\",\r\n      verified: true,\r\n      text: tweetMessage,\r\n      image: tweetImage,\r\n      avatar:\r\n        \"https://kajabi-storefronts-production.global.ssl.fastly.net/kajabi-storefronts-production/themes/284832/settings_images/rLlCifhXRJiT0RoN2FjK_Logo_roundbackground_black.png\",\r\n    });\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar src=\"https://kajabi-storefronts-production.global.ssl.fastly.net/kajabi-storefronts-production/themes/284832/settings_images/rLlCifhXRJiT0RoN2FjK_Logo_roundbackground_black.png\" />\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n","import React, { forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\n\r\nconst Post = forwardRef(({ displayName, username, verified, text, image, avatar, explanation }, ref) => {\r\n\r\n  return (\r\n    <div className=\"post\" ref={ref}>\r\n\r\n      <div className=\"post__avatar\">\r\n        <Avatar src={avatar} />\r\n      </div>\r\n\r\n      <div className=\"post__body\">\r\n\r\n        <div className=\"post__header\">\r\n          <div className=\"post__headerText\">\r\n            <h3>\r\n              {displayName}{\" \"}\r\n              <span className=\"post__headerSpecial\">\r\n              {verified && <VerifiedUserIcon className=\"post__badge\"/>} @\r\n                {username}\r\n            </span>\r\n            </h3>\r\n          </div>\r\n          <div className=\"post__headerDescription\">\r\n            <p>{text}</p>\r\n          </div>\r\n        </div>\r\n\r\n        <img src={image} alt=\"\" />\r\n\r\n        <div className=\"post__footer\">\r\n          <ChatBubbleOutlineIcon fontSize=\"small\" />\r\n          <RepeatIcon fontSize=\"small\" />\r\n          <FavoriteBorderIcon fontSize=\"small\" />\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport axios from \"axios\"\r\n\r\nimport TweetBox from \"./TweetBox\";\r\nimport Post from \"./Post\";\r\nimport \"./Feed.css\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\n\r\nclass Feed extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {loading: false, page: 0, posts: []};\r\n    // loads 5 posts first\r\n    for (let i = 0; i < 5; i++) {\r\n      this.addPost();\r\n    }\r\n  }\r\n\r\n\r\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    return !this.state.loading;\r\n  }\r\n\r\n  addPost = () =>{\r\n    // if(this.state.loading === false) {\r\n    if(true) {\r\n      const API_URL = \"/api/\"\r\n\r\n      const tweet_url = API_URL + \"getRandomTweet/\";\r\n      let poster_url = API_URL + \"getUserInfo/\";\r\n      this.setState({page: this.state.page + 1, loading: true});\r\n\r\n      axios\r\n        .get(tweet_url)// gets the tweet, including the poster's username\r\n        .then(response1 => {\r\n          let post;\r\n          post = response1.data[0];\r\n          poster_url = poster_url + post['poster'] + '/'\r\n          axios\r\n            .get(poster_url)// gets the poster's info from their username that was acquired above\r\n            .then(response2 => {\r\n              let userInfo = response2.data[0]\r\n              post['username'] = userInfo['username'];\r\n              post['displayName'] = userInfo['displayName'];\r\n              post['avatar'] = userInfo['avatar']\r\n              post['verified'] = userInfo['verified'];\r\n              console.log(post);\r\n              this.setState({posts: this.state.posts.concat(post)});\r\n              this.setState({loading: false});\r\n            })\r\n            .catch(err2 => {console.log(\"axios error2: \" + err2); this.setState({loading: false});})\r\n        })\r\n        .catch(err1 => {console.log(\"axios error1: \" + err1); this.setState({loading: false});})\r\n    }\r\n  }\r\n\r\n  handleScroll = (e) => {\r\n    e.preventDefault()\r\n    const height_target = Math.round(e.target.scrollHeight - e.target.scrollTop)\r\n\r\n    // checks if the user has scrolled to the bottom of the element\r\n    // only add post if a post isn't already loading\r\n    if (this.state.loading === false && height_target <= Math.ceil(e.target.clientHeight) + 100) {\r\n      console.log(\"loading new post, triggered by scrolling\")\r\n      this.addPost()\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"feed\" onScroll={this.handleScroll}>\r\n        <div className=\"feed__header\">\r\n          <h2>Home</h2>\r\n        </div>\r\n        <TweetBox/>\r\n        <FlipMove>\r\n          {this.state.posts.map((post, index) => (\r\n            <Post\r\n              key={index}\r\n              username={post.username}\r\n              displayName={post.displayName}\r\n              verified={post.verified}\r\n              text={post.text}\r\n              avatar={post.avatar}\r\n              image={post.image}\r\n            />\r\n          ))}\r\n        </FlipMove>\r\n        <button onClick={this.addPost}> load next post </button>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feed;\r\n","import React from \"react\";\r\nimport \"./Widgets.css\";\r\nimport {\r\n  TwitterTimelineEmbed,\r\n  TwitterShareButton,\r\n  TwitterTweetEmbed,\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nfunction Widgets() {\r\n  return (\r\n    <div className=\"widgets\">\r\n      <div className=\"widgets__input\">\r\n        <SearchIcon className=\"widgets__searchIcon\" />\r\n        <input placeholder=\"Search Twitter\" type=\"text\" />\r\n      </div>\r\n\r\n      <div className=\"widgets__widgetContainer\">\r\n        <h2>What's happening</h2>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;\r\n","import React from \"react\";\r\n\r\nimport Sidebar from \"./Sidebar\";\r\nimport Feed from \"./Feed\";\r\nimport Widgets from \"./Widgets\";\r\n\r\nimport \"./App.css\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    // BEM\r\n    <html lang=\"en\">\r\n      <div className=\"app\">\r\n        <Sidebar />\r\n        <Feed />\r\n        <Widgets />\r\n      </div>\r\n    </html>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}